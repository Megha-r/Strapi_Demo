type Cmsbuttons {
  _id: ID!
  code: String!
  en: String!
  es: String!
  fr: String!
  routeCode: String
}

type CmsbuttonsAggregator {
  count: Int
}

type CmsbuttonsConnection {
  values: [Cmsbuttons]
  groupBy: CmsbuttonsGroupBy
  aggregate: CmsbuttonsAggregator
}

type CmsbuttonsConnection_id {
  key: ID
  connection: CmsbuttonsConnection
}

type CmsbuttonsConnectionCode {
  key: String
  connection: CmsbuttonsConnection
}

type CmsbuttonsConnectionEn {
  key: String
  connection: CmsbuttonsConnection
}

type CmsbuttonsConnectionEs {
  key: String
  connection: CmsbuttonsConnection
}

type CmsbuttonsConnectionFr {
  key: String
  connection: CmsbuttonsConnection
}

type CmsbuttonsConnectionRouteCode {
  key: String
  connection: CmsbuttonsConnection
}

type CmsbuttonsGroupBy {
  _id: [CmsbuttonsConnection_id]
  code: [CmsbuttonsConnectionCode]
  en: [CmsbuttonsConnectionEn]
  es: [CmsbuttonsConnectionEs]
  fr: [CmsbuttonsConnectionFr]
  routeCode: [CmsbuttonsConnectionRouteCode]
}

input CmsbuttonsInput {
  code: String!
  en: String!
  es: String!
  fr: String!
  routeCode: String
}

type Cmslabel {
  _id: ID!
  code: String!
  en: String!
  fr: String
  es: String
  routeCode: String
}

type CmslabelAggregator {
  count: Int
}

type CmslabelConnection {
  values: [Cmslabel]
  groupBy: CmslabelGroupBy
  aggregate: CmslabelAggregator
}

type CmslabelConnection_id {
  key: ID
  connection: CmslabelConnection
}

type CmslabelConnectionCode {
  key: String
  connection: CmslabelConnection
}

type CmslabelConnectionEn {
  key: String
  connection: CmslabelConnection
}

type CmslabelConnectionEs {
  key: String
  connection: CmslabelConnection
}

type CmslabelConnectionFr {
  key: String
  connection: CmslabelConnection
}

type CmslabelConnectionRouteCode {
  key: String
  connection: CmslabelConnection
}

type CmslabelGroupBy {
  _id: [CmslabelConnection_id]
  code: [CmslabelConnectionCode]
  en: [CmslabelConnectionEn]
  fr: [CmslabelConnectionFr]
  es: [CmslabelConnectionEs]
  routeCode: [CmslabelConnectionRouteCode]
}

input CmslabelInput {
  code: String!
  en: String!
  fr: String
  es: String
  routeCode: String
}

input createCmsbuttonsInput {
  data: CmsbuttonsInput
}

type createCmsbuttonsPayload {
  cmsbutton: Cmsbuttons
}

input createCmslabelInput {
  data: CmslabelInput
}

type createCmslabelPayload {
  cmslabel: Cmslabel
}

input createInactivecmslabelsInput {
  data: InactivecmslabelsInput
}

type createInactivecmslabelsPayload {
  inactivecmslabel: Inactivecmslabels
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCmsbuttonsInput {
  where: InputID
}

type deleteCmsbuttonsPayload {
  cmsbutton: Cmsbuttons
}

input deleteCmslabelInput {
  where: InputID
}

type deleteCmslabelPayload {
  cmslabel: Cmslabel
}

input deleteInactivecmslabelsInput {
  where: InputID
}

type deleteInactivecmslabelsPayload {
  inactivecmslabel: Inactivecmslabels
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Inactivecmslabels {
  _id: ID!
  Status: Boolean
  code: String!
  en: String!
  fr: String
  es: String
  routeCode: String
}

type InactivecmslabelsAggregator {
  count: Int
}

type InactivecmslabelsConnection {
  values: [Inactivecmslabels]
  groupBy: InactivecmslabelsGroupBy
  aggregate: InactivecmslabelsAggregator
}

type InactivecmslabelsConnection_id {
  key: ID
  connection: InactivecmslabelsConnection
}

type InactivecmslabelsConnectionCode {
  key: String
  connection: InactivecmslabelsConnection
}

type InactivecmslabelsConnectionEn {
  key: String
  connection: InactivecmslabelsConnection
}

type InactivecmslabelsConnectionEs {
  key: String
  connection: InactivecmslabelsConnection
}

type InactivecmslabelsConnectionFr {
  key: String
  connection: InactivecmslabelsConnection
}

type InactivecmslabelsConnectionRouteCode {
  key: String
  connection: InactivecmslabelsConnection
}

type InactivecmslabelsConnectionStatus {
  key: Boolean
  connection: InactivecmslabelsConnection
}

type InactivecmslabelsGroupBy {
  _id: [InactivecmslabelsConnection_id]
  Status: [InactivecmslabelsConnectionStatus]
  code: [InactivecmslabelsConnectionCode]
  en: [InactivecmslabelsConnectionEn]
  fr: [InactivecmslabelsConnectionFr]
  es: [InactivecmslabelsConnectionEs]
  routeCode: [InactivecmslabelsConnectionRouteCode]
}

input InactivecmslabelsInput {
  Status: Boolean
  code: String!
  en: String!
  fr: String
  es: String
  routeCode: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Cmsbuttons | createCmsbuttonsPayload | updateCmsbuttonsPayload | deleteCmsbuttonsPayload | CmsbuttonsConnection | CmsbuttonsAggregator | CmsbuttonsGroupBy | CmsbuttonsConnection_id | CmsbuttonsConnectionCode | CmsbuttonsConnectionEn | CmsbuttonsConnectionEs | CmsbuttonsConnectionFr | CmsbuttonsConnectionRouteCode | Cmslabel | createCmslabelPayload | updateCmslabelPayload | deleteCmslabelPayload | CmslabelConnection | CmslabelAggregator | CmslabelGroupBy | CmslabelConnection_id | CmslabelConnectionCode | CmslabelConnectionEn | CmslabelConnectionFr | CmslabelConnectionEs | CmslabelConnectionRouteCode | Inactivecmslabels | createInactivecmslabelsPayload | updateInactivecmslabelsPayload | deleteInactivecmslabelsPayload | InactivecmslabelsConnection | InactivecmslabelsAggregator | InactivecmslabelsGroupBy | InactivecmslabelsConnection_id | InactivecmslabelsConnectionStatus | InactivecmslabelsConnectionCode | InactivecmslabelsConnectionEn | InactivecmslabelsConnectionFr | InactivecmslabelsConnectionEs | InactivecmslabelsConnectionRouteCode | Product | createProductPayload | updateProductPayload | deleteProductPayload | ProductConnection | ProductAggregator | ProductAggregatorSum | ProductAggregatorAvg | ProductAggregatorMin | ProductAggregatorMax | ProductGroupBy | ProductConnection_id | ProductConnectionName | ProductConnectionPrice | ProductConnectionDescription | ProductConnectionQuantity | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createCmsbuttons(input: createCmsbuttonsInput): createCmsbuttonsPayload
  updateCmsbuttons(input: updateCmsbuttonsInput): updateCmsbuttonsPayload
  deleteCmsbuttons(input: deleteCmsbuttonsInput): deleteCmsbuttonsPayload
  createCmslabel(input: createCmslabelInput): createCmslabelPayload
  updateCmslabel(input: updateCmslabelInput): updateCmslabelPayload
  deleteCmslabel(input: deleteCmslabelInput): deleteCmslabelPayload
  createInactivecmslabels(input: createInactivecmslabelsInput): createInactivecmslabelsPayload
  updateInactivecmslabels(input: updateInactivecmslabelsInput): updateInactivecmslabelsPayload
  deleteInactivecmslabels(input: deleteInactivecmslabelsInput): deleteInactivecmslabelsPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Product {
  _id: ID!
  name: String
  price: Float
  description: String
  quantity: Int
}

type ProductAggregator {
  count: Int
  sum: ProductAggregatorSum
  avg: ProductAggregatorAvg
  min: ProductAggregatorMin
  max: ProductAggregatorMax
}

type ProductAggregatorAvg {
  price: Float
  quantity: Float
}

type ProductAggregatorMax {
  price: Float
  quantity: Float
}

type ProductAggregatorMin {
  price: Float
  quantity: Float
}

type ProductAggregatorSum {
  price: Float
  quantity: Float
}

type ProductConnection {
  values: [Product]
  groupBy: ProductGroupBy
  aggregate: ProductAggregator
}

type ProductConnection_id {
  key: ID
  connection: ProductConnection
}

type ProductConnectionDescription {
  key: String
  connection: ProductConnection
}

type ProductConnectionName {
  key: String
  connection: ProductConnection
}

type ProductConnectionPrice {
  key: Float
  connection: ProductConnection
}

type ProductConnectionQuantity {
  key: Int
  connection: ProductConnection
}

type ProductGroupBy {
  _id: [ProductConnection_id]
  name: [ProductConnectionName]
  price: [ProductConnectionPrice]
  description: [ProductConnectionDescription]
  quantity: [ProductConnectionQuantity]
}

input ProductInput {
  name: String
  price: Float
  description: String
  quantity: Int
}

type Query {
  cmsbutton(id: ID!): Cmsbuttons
  cmsbuttons(sort: String, limit: Int, start: Int, where: JSON): [Cmsbuttons]
  cmsbuttonsConnection(sort: String, limit: Int, start: Int, where: JSON): CmsbuttonsConnection
  cmslabel(id: ID!): Cmslabel
  cmslabels(sort: String, limit: Int, start: Int, where: JSON): [Cmslabel]
  cmslabelsConnection(sort: String, limit: Int, start: Int, where: JSON): CmslabelConnection
  inactivecmslabel(id: ID!): Inactivecmslabels
  inactivecmslabels(sort: String, limit: Int, start: Int, where: JSON): [Inactivecmslabels]
  inactivecmslabelsConnection(sort: String, limit: Int, start: Int, where: JSON): InactivecmslabelsConnection
  product(id: ID!): Product
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateCmsbuttonsInput {
  where: InputID
  data: CmsbuttonsInput
}

type updateCmsbuttonsPayload {
  cmsbutton: Cmsbuttons
}

input updateCmslabelInput {
  where: InputID
  data: CmslabelInput
}

type updateCmslabelPayload {
  cmslabel: Cmslabel
}

input updateInactivecmslabelsInput {
  where: InputID
  data: InactivecmslabelsInput
}

type updateInactivecmslabelsPayload {
  inactivecmslabel: Inactivecmslabels
}

input updateProductInput {
  where: InputID
  data: ProductInput
}

type updateProductPayload {
  product: Product
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
