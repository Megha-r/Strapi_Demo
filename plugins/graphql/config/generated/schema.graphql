type Employee {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  Name: String
  Emp_ID: Int
  Email: String
  Joining_date: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Employee | Product | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Product {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  Name: String
  Description: String
  Price: Int
}

type Query {
  employee(id: ID!): Employee
  employees(sort: String, limit: Int, start: Int, where: JSON): [Employee]
  product(id: ID!): Product
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UploadFile {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  hash: String!
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  role: UsersPermissionsRole
}
